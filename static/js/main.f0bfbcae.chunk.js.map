{"version":3,"sources":["Components/Header.jsx","AppReducer.js","GlobalContext.js","Components/Balance.jsx","Components/IncomeExpenses.jsx","Components/TransactionList.jsx","Components/AddTransaction.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","state","action","type","_transactions","filter","transaction","id","payload","initialState","text","amount","GlobalContext","createContext","GlobaProvider","children","useReducer","AppReducer","dispatch","Provider","value","transactions","deleteTransaction","console","log","addTrans","data","Balance","transArr","useContext","map","reduce","total","num","IncomeExpenses","className","TransactionList","toString","split","onClick","AddTransaction","useState","setAmount","reason","setReason","onSubmit","e","preventDefault","Math","floor","random","parseInt","htmlFor","placeholder","onChange","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0bfbcae.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div>\r\n      <h2>Expense Tracker</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","export default (state, action) => {\r\n  switch (action.type) {\r\n    case \"DELETE_TRANS\":\r\n      return {\r\n        ...state,\r\n        _transactions: state._transactions.filter(\r\n          (transaction) => transaction.id !== action.payload\r\n        ),\r\n      };\r\n    case \"ADD_TRANS\":\r\n      return {\r\n        _transactions: [...state._transactions, action.payload],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport AppReducer from \"./AppReducer\";\r\nconst initialState = {\r\n  _transactions: [\r\n    { id: 1, text: \"Flower\", amount: -20 },\r\n    { id: 2, text: \"Salary\", amount: 300 },\r\n    { id: 3, text: \"Book\", amount: -10 },\r\n    { id: 4, text: \"Camera\", amount: 150 },\r\n  ],\r\n};\r\n\r\nexport const GlobalContext = createContext(initialState);\r\n\r\nexport const GlobaProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n  function deleteTransaction(id) {\r\n    console.log(id);\r\n    dispatch({\r\n      type: \"DELETE_TRANS\",\r\n      payload: id,\r\n    });\r\n    console.log(state._transactions);\r\n  }\r\n\r\n  function addTrans(data) {\r\n    console.log(data);\r\n    dispatch({\r\n      type: \"ADD_TRANS\",\r\n      payload: data,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        transactions: state._transactions,\r\n        deleteTransaction,\r\n        addTrans,\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../GlobalContext\";\r\n\r\nfunction Balance() {\r\n  const { transactions } = useContext(GlobalContext);\r\n  let transArr = transactions.map((transaction) => {\r\n    return transaction.amount;\r\n  });\r\n  return (\r\n    <div>\r\n      <h4>Your Balance</h4>\r\n      <h1>{transArr.reduce((total, num) => total + num, 0)}</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Balance;\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../GlobalContext\";\r\nfunction IncomeExpenses() {\r\n  const { transactions } = useContext(GlobalContext);\r\n  let transArr = transactions.map((transaction) => {\r\n    return transaction.amount;\r\n  });\r\n  return (\r\n    <div className=\"inc-exp-container\">\r\n      <div>\r\n        <h4>Income</h4>\r\n        <p className=\"money plus\">\r\n          +$\r\n          {transArr\r\n            .filter((amount) => amount > 0)\r\n            .reduce((total, amount) => total + amount, 0)}\r\n        </p>\r\n      </div>\r\n      <div>\r\n        <h4>Expense</h4>\r\n        <p className=\"money minus\">\r\n          -$\r\n          {transArr\r\n            .filter((amount) => amount < 0)\r\n            .reduce((total, amount) => total + amount, 0)}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default IncomeExpenses;\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../GlobalContext\";\r\n\r\nfunction TransactionList() {\r\n  const { transactions, deleteTransaction } = useContext(GlobalContext);\r\n  return (\r\n    <div>\r\n      <h3>History</h3>\r\n      <ul className=\"list\">\r\n        {transactions.map((transaction) => (\r\n          <li\r\n            key={transaction.id}\r\n            className={\r\n              transaction.amount.toString().split(\"\")[0] === \"-\"\r\n                ? \"minus\"\r\n                : \"plus\"\r\n            }\r\n          >\r\n            {transaction.text}\r\n            <span>{transaction.amount}</span>\r\n            <button\r\n              className=\"delete-btn\"\r\n              onClick={() => deleteTransaction(transaction.id)}\r\n            >\r\n              x\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TransactionList;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { GlobalContext } from \"../GlobalContext\";\r\nfunction AddTransaction() {\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [reason, setReason] = useState(\"\");\r\n\r\n  const { addTrans } = useContext(GlobalContext);\r\n\r\n  const addTransaction = (e) => {\r\n    e.preventDefault();\r\n    console.log(Math.floor(Math.random() * 10000 + 1));\r\n    console.log(typeof amount);\r\n    let data = {\r\n      id: Math.floor(Math.random() * 10 + 1),\r\n      text: reason,\r\n      amount: parseInt(amount),\r\n    };\r\n    addTrans(data);\r\n  };\r\n  return (\r\n    <div>\r\n      <h3>Add new transaction</h3>\r\n      <form onSubmit={addTransaction}>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"text\">Text</label>\r\n          <input\r\n            type=\"text\"\r\n            value={reason}\r\n            placeholder=\"Enter text...\"\r\n            onChange={(e) => setReason(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"amount\">\r\n            Amount <br />\r\n            (negative - expense, positive - income)\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            value={amount}\r\n            placeholder=\"Enter amount...\"\r\n            onChange={(e) => setAmount(e.target.value)}\r\n          />\r\n        </div>\r\n        <button className=\"btn\">Add transaction</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddTransaction;\r\n","import \"./App.css\";\nimport Header from \"./Components/Header\";\nimport Balance from \"./Components/Balance\";\nimport IncomeExpenses from \"./Components/IncomeExpenses\";\nimport TransactionList from \"./Components/TransactionList\";\nimport AddTransaction from \"./Components/AddTransaction\";\nimport { GlobaProvider } from \"./GlobalContext\";\nfunction App() {\n  return (\n    <GlobaProvider>\n      <Header />\n      <div className=\"container\">\n        <Balance />\n        <IncomeExpenses />\n        <TransactionList />\n        <AddTransaction />\n      </div>\n    </GlobaProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}